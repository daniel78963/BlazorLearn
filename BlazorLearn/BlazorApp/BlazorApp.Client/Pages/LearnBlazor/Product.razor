@page "/learnBlazor/product"
@rendermode InteractiveAuto
@using Blazor.Model.LearnBlazor

<div class="row">
    <div class="col-6 border p-3">
        <h3 class="text-primary">Product Playground</h3>
        <hr />
        Active: @(product.IsActive ? "Yes" : "No")
        <br />
        Input Price:
        <input type="number" @bind-value="@product.Price" @bind-value:event="oninput" />
        <br />
        Product Properties:
        <select @bind="selectedProp">
            @foreach (var prop in product.ProductProperties)
            {
                <option value="@prop.Key">@prop.Key - @prop.Value</option>
            }
        </select>
        <br />
    </div>
    <div class="col-6 border p-3">
        <h3 class="text-primary">Product Summary</h3>
        <hr />
        Name: @product.Name
        <br />
        Price: @product.Price.ToString("C")
        <br />
        Description: @product.Description
        <br /> 
        Selected Property: @selectedProp
        <br />
        @if (!string.IsNullOrEmpty(selectedProp))
        {
            <p>Selected value: @product.ProductProperties.FirstOrDefault(u => u.Key == selectedProp).Value</p>
        }
    </div>
</div>

 
@code {

    private string selectedProp = string.Empty;

    Blazor.Model.LearnBlazor.Product product = new Blazor.Model.LearnBlazor.Product
    {
        Name = "Sample Product",
        Price = 19.99m,
        Description = "This is a sample product description.",
        IsActive = true,
        ProductProperties = new List<Blazor.Model.LearnBlazor.Product_Prop>
        {
            new Product_Prop { Id = 1, Key = "Color", Value = "Red" },
            new Product_Prop { Id=2, Key = "Size", Value = "Medium" },
            new Product_Prop { Id=3, Key = "Flavor", Value = "Rose" }
        }
    };
}

