@page "/learnblazor/blazor-forms"
@rendermode InteractiveAuto
@using Blazor.Model.LearnBlazor

<h3>Blazor Forms</h3>

<div class="col-12 offset-md-2 col-md-8 border">
    <div class="text-center pt-4">
        <h2 class="text-success">Product Form</h2>
        <hr />
    </div>
    <div class="mx-2 px-2">
        <form>
            <EditForm FormName="ProductCreate" Model="Product" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                @* <ValidationSummary></ValidationSummary> *@
                <div class="form-group py-2">
                    Product Name
                    <InputText class="form-control" @bind-Value="@Product.Name" />
                    <ValidationMessage For="@(() => Product.Name)" />
                </div>
                <div class="form-group py-2">
                    Price
                    <InputNumber class="form-control" @bind-Value="@Product.Price" />
                    <ValidationMessage For="@(() => Product.Price)" />
                </div>
                <div class="form-group py-2">
                    Category
                    <InputSelect class="form-select" @bind-Value="@Product.Category">
                        @foreach (var cat in Enum.GetValues(typeof(Category)))
                        {
                            <option value="@cat">@cat</option>
                        }
                    </InputSelect>
                </div>
                <div class="form-group py-2">
                    IsActive
                    <InputCheckbox @bind-Value="@Product.IsActive" /> 
                </div>
                <div class="form-group py-2">
                    Available After
                    <InputDate class="form-control" @bind-Value="@Product.AvailableAfter" />
                </div>

                <button class="btn btn-primary my-3" type="submit" style="width: 200px;">
                    Create Product
                </button>
                <p class="text-success">@(IsProcessing == true ? "Processing..." : "")</p>
            </EditForm>
        </form>
    </div>

    @if (createdProduct is not null)
    {
        <div class="mx-2 pt-4">
            <hr />
            <h2 class="text-success">Product Created</h2>
            <div class="px-4">
                Name: @createdProduct.Name <br />
                Price: @createdProduct.Price <br />
                Category: @createdProduct.Category <br />
                IsActive: @(createdProduct.IsActive == true ? "Yes" : "No") <br />
                Available After: @createdProduct.AvailableAfter.ToShortDateString() <br />
            </div>
        </div>
    }
</div>

@code {
    public Blazor.Model.LearnBlazor.Product Product { get; set; } = new Blazor.Model.LearnBlazor.Product();
    public Blazor.Model.LearnBlazor.Product? createdProduct { get; set; } = null;
    private bool IsProcessing { get; set; } = false;

    private async Task HandleValidSubmit()
    {
        IsProcessing = true;
        createdProduct = null;
        await Task.Delay(3000); // Simulate a delay for processing
        createdProduct = Product;
        Product = new Blazor.Model.LearnBlazor.Product();
        
        // Handle the valid form submission here
        // await Task.CompletedTask;
        IsProcessing = false;
    }

    private async Task HandleInValidSubmit()
    {
        IsProcessing = true;
        await Task.Delay(9000);
        IsProcessing = false;
    }
}
